from google.colab import drive
drive.mount('/content/drive')

import requests
import base64
import json
import time
import uuid

# 네이버 클로바 OCR API 정보
API_URL = "https://uv09977dh5.apigw.ntruss.com/custom/v1/40195/a9bded21d783da7da6fa8808cc2d30848d1d9a6aa5b27f24fe223d8ecdfd3e12/general"
SECRET_KEY = "bUdhQ3J6RXdYZ1Vta0FNYmRnR3dKd2xkR3J5UVFLbEM="

## 아웃백 영수증

# 이미지 파일 Base64 인코딩
image_path = "/content/drive/MyDrive/영수증/KakaoTalk_20250328_141545565.jpg"  # 영수증 이미지 파일 경로
with open(image_path, "rb") as image_file:
    encoded_image = base64.b64encode(image_file.read()).decode('utf-8')

# API 요청 JSON 데이터 만들기
request_json = {
    "version": "V2",
    "requestId": str(uuid.uuid4()),  # 랜덤 UUID 생성
    "timestamp": int(time.time() * 1000),  # 현재 시간 (밀리초)
    "images": [
        {
            "format": "jpg",
            "name": "receipt",
            "data": encoded_image
        }
    ]
}

# API 요청 헤더 설정
headers = {
    "X-OCR-SECRET": SECRET_KEY,  # API Secret Key
    "Content-Type": "application/json"
}

# API 요청 보내기
response = requests.post(API_URL, headers=headers, data=json.dumps(request_json))

# 응답 결과 확인
if response.status_code == 200:
    result = response.json()
    print(json.dumps(result, indent=4, ensure_ascii=False))  # JSON 결과 출력
else:
    print(f"Error {response.status_code}: {response.text}")  # 에러 출력

# 저장
with open('result.json', 'w', encoding='utf-8') as f:
    json.dump(result, f, ensure_ascii=False, indent=4)

from google.colab import files
files.download('result.json')

# 불러오기
with open('result.json', 'r', encoding='utf-8') as f:
    data = json.load(f)

BLOCKLIST = [
    # 주소/위치
    "로", "길", "동", "구", "시", "호", "지점", "본점", "연세", "건물", "층", "타워",

    # 결제 관련
    "승인", "번호", "카드", "계좌", "결제", "합계", "계", "금액", "부가세", "면세",
    "결제금액", "총금액", "할인", "잔액", "포인트", "현금", "신용", "영수증", "쿠폰", "할부",
    "입금", "출금", "정산", "취소", "사용", "적립", "남은", "변경", "매출", "총합", "승인번호",

    # 시스템 관련
    "POS", "단말기", "KIOSK", "매장", "고객", "번호", "발행", "출력", "시간", "날짜", "매출", "주문",

    # 공통 잡음
    ":", "[", "]", "-", "총", "개", "외", "상품권", "사원", "감사", "이용", "정상", "입력",
    "전화", "이메일", "담당", "문의", "서비스", "주문번호", "테이블", "호출", "예약", "번호표",

    # 날짜 관련
    "년", "월", "일", "시", "분", "초",

    # 기타
    "테이블", "영업", "내역", "상호", "사업자", "대표자", "등록", "인증", "계산", "발행처"
]

# inferText 리스트로 추출
texts = []
for field in data['images'][0]['fields']:
    texts.append(field['inferText'])

# '메뉴', '수량', '금액' 라벨은 제거
filtered = [t for t in texts if t not in ['메뉴', '수량', '금액']]

import re
def has_korean(text):
    return bool(re.search(r"[가-힣]", text))

def is_valid_name(text):
    return len(text) >= 1 and not any(c in text for c in ":[]")

def is_probably_menu_name(text):
    return (
        has_korean(text) and
        is_valid_name(text)
    )

def is_blocked(text):
    return any(block in text for block in BLOCKLIST)

items = []
i = 0

while i < len(filtered) - 2:
    name = filtered[i].strip()
    quantity = filtered[i + 1].strip()

    if (
        quantity.replace(",", "").isdigit() and # 수량이 숫자인가
        int(quantity.replace(",", "")) < 100 and
        is_probably_menu_name(name) and
        not is_blocked(name)
    ):
        items.append({
            '이름': name,
            '수량': quantity
        })
        i += 3
    else:
        i += 1

# 결과 확인
for item in items:
    print(f"{item['이름']} - {item['수량']}개")

## 마트 영수증 샘플

sample_data = {
    "images": [
        {
            "fields": [
                {"inferText": "메뉴"},
                {"inferText": "수량"},
                {"inferText": "금액"},
                {"inferText": "청양고추"},
                {"inferText": "2"},
                {"inferText": "1,400"},
                {"inferText": "양파망"},
                {"inferText": "1"},
                {"inferText": "2,500"},
                {"inferText": "우유(서울우유)"},
                {"inferText": "2"},
                {"inferText": "3,960"},
                {"inferText": "계:"},
                {"inferText": "7,860"},
                {"inferText": "결제방법: 카드"},
                {"inferText": "승인번호: 274812"},
                {"inferText": "감사합니다!"}
            ]
        }
    ]
}

import json

with open('sample_mart_receipt.json', 'w', encoding='utf-8') as f:
    json.dump(sample_data, f, ensure_ascii=False, indent=4)

with open('sample_mart_receipt.json', 'r', encoding='utf-8') as f:
    result = json.load(f)

texts = [field['inferText'] for field in result['images'][0]['fields']]
# → 이후 필터링 코드 적용

# '메뉴', '수량', '금액' 라벨은 제거
filtered = [t for t in texts if t not in ['메뉴', '수량', '금액']]

items = []
i = 0

while i < len(filtered) - 2:
    name = filtered[i].strip()
    quantity = filtered[i + 1].strip()

    if (
        quantity.replace(",", "").isdigit() and # 수량이 숫자인가
        int(quantity.replace(",", "")) < 100 and
        is_probably_menu_name(name) and
        not is_blocked(name)
    ):
        items.append({
            '이름': name,
            '수량': quantity
        })
        i += 3
    else:
        i += 1

# 결과 확인
for item in items:
    print(f"{item['이름']} - {item['수량']}개")

## 농협 영수증

#이미지 파일 Base64 인코딩
image_path = "/content/drive/MyDrive/영수증/971120_20170705143932_354_0001.jpg"  # 영수증 이미지 파일 경로
with open(image_path, "rb") as image_file:
    encoded_image = base64.b64encode(image_file.read()).decode('utf-8')

# API 요청 JSON 데이터 만들기
request_json = {
    "version": "V2",
    "requestId": str(uuid.uuid4()),  # 랜덤 UUID 생성
    "timestamp": int(time.time() * 1000),  # 현재 시간 (밀리초)
    "images": [
        {
            "format": "jpg",
            "name": "receipt",
            "data": encoded_image
        }
    ]
}

# API 요청 헤더 설정
headers = {
    "X-OCR-SECRET": SECRET_KEY,  # API Secret Key
    "Content-Type": "application/json"
}

# API 요청 보내기
response = requests.post(API_URL, headers=headers, data=json.dumps(request_json))

# 응답 결과 확인
if response.status_code == 200:
    result = response.json()
    print(json.dumps(result, indent=4, ensure_ascii=False))  # JSON 결과 출력
else:
    print(f"Error {response.status_code}: {response.text}")  # 에러 출력

# 저장
with open('result2.json', 'w', encoding='utf-8') as f:
    json.dump(result, f, ensure_ascii=False, indent=4)

files.download('result2.json')

with open('result2.json', 'r', encoding='utf-8') as f:
    result = json.load(f)

texts = [field['inferText'] for field in result['images'][0]['fields']]
# → 이후 필터링 코드 적용

# '메뉴', '수량', '금액' 라벨은 제거
filtered = [t for t in texts if t not in ['메뉴', '수량', '금액']]

items = []
i = 0

while i < len(filtered) - 2:
    name = filtered[i].strip()
    quantity = filtered[i + 1].strip()

    if (
        quantity.replace(",", "").isdigit() and # 수량이 숫자인가
        int(quantity.replace(",", "")) < 100 and
        is_probably_menu_name(name) and
        not is_blocked(name)
    ):
        items.append({
            '이름': name,
            '수량': quantity
        })
        i += 3
    else:
        i += 1

# 결과 확인
for item in items:
    print(f"{item['이름']} - {item['수량']}개")

# 영수증 3

# 이미지 파일 Base64 인코딩
image_path = "/content/drive/MyDrive/영수증/01.36706977.1.jpg"  # 영수증 이미지 파일 경로
with open(image_path, "rb") as image_file:
    encoded_image = base64.b64encode(image_file.read()).decode('utf-8')

# API 요청 JSON 데이터 만들기
request_json = {
    "version": "V2",
    "requestId": str(uuid.uuid4()),  # 랜덤 UUID 생성
    "timestamp": int(time.time() * 1000),  # 현재 시간 (밀리초)
    "images": [
        {
            "format": "jpg",
            "name": "receipt",
            "data": encoded_image
        }
    ]
}

# API 요청 헤더 설정
headers = {
    "X-OCR-SECRET": SECRET_KEY,  # API Secret Key
    "Content-Type": "application/json"
}

# API 요청 보내기
response = requests.post(API_URL, headers=headers, data=json.dumps(request_json))

# 응답 결과 확인
if response.status_code == 200:
    result = response.json()
    print(json.dumps(result, indent=4, ensure_ascii=False))  # JSON 결과 출력
else:
    print(f"Error {response.status_code}: {response.text}")  # 에러 출력

## 일반화 함수

import base64
import uuid
import time
import requests
import json
import re
from difflib import get_close_matches

def parse_receipt(image_path: str, api_url: str, secret_key: str) -> list[dict]:
    """
    Clova OCR로 영수증을 파싱하여,
    'P' 접두가 붙은 모든 품목에 대해
      • 이름: 'P' 제거 후, 연속된 한글 토큰을 합쳐서 생성 (까찌→아찌 치환)
      • 수량: 이름 뒤 첫 순수 정수(<=100)를 수량으로 사용 (없으면 '1')
      • 금액: 해당 수량 바로 앞의 숫자(콤마 포함)를 금액으로 추출
    '포인트', '회원' 등 불필요 항목은 자동으로 제외합니다.
    """
    # 1) 이미지 → Base64
    with open(image_path, "rb") as f:
        img_b64 = base64.b64encode(f.read()).decode("utf-8")

    # 2) OCR API 호출
    payload = {
        "version": "V2",
        "requestId": str(uuid.uuid4()),
        "timestamp": int(time.time() * 1000),
        "images": [{
            "format": image_path.rsplit(".", 1)[-1],
            "name": "receipt",
            "data": img_b64
        }]
    }
    headers = {
        "X-OCR-SECRET": secret_key,
        "Content-Type": "application/json"
    }
    resp = requests.post(api_url, headers=headers, json=payload)
    resp.raise_for_status()
    fields = resp.json()["images"][0]["fields"]

    # 3) 토큰 목록 추출
    tokens = [f["inferText"] for f in fields]
    n = len(tokens)
    items = []

    # 4) 제외할 키워드
    UNWANTED = {"포인트", "회원", "고객포인트", "잔여포인트", "사용가능포인트"}

    # 5) 'P' 접두 아이템 처리
    for i, tok in enumerate(tokens):
        if not tok.startswith("P"):
            continue

        # 5.1) 이름 조합 (P 제거 + 뒤따르는 한글)
        name_parts = [tok[1:].strip()]
        j = i + 1
        while j < n:
            nxt = tokens[j].strip()
            # 숫자/가격/바코드(*) 만나면 이름 조합 종료
            if re.fullmatch(r"(\*.*|\d+([,]\d{3})*(ML|ml|g|G)?)", nxt):
                break
            hanguls = re.findall(r"[가-힣]+", nxt)
            if hanguls:
                part = "".join(hanguls).replace("까찌", "아찌")
                name_parts.append(part)
                j += 1
                continue
            break
        full_name = " ".join(name_parts)

        # 5.2) 불필요 항목 필터링
        if any(k in full_name for k in UNWANTED):
            continue

        # 5.3) 수량 및 금액 추출
        qty = None
        price = ""
        # j는 이름 끝난 인덱스, 그 뒤 최대 5칸에서 수량과 가격 찾기
        for k in range(j, min(j + 6, n)):
            tok2 = tokens[k].replace(",", "").strip()
            # 순수 숫자 토큰이면 수량 후보
            if tok2.isdigit():
                q = int(tok2)
                if 1 <= q <= 100:
                    qty = tok2
                    # 가격은 수량 바로 앞 토큰
                    prev = tokens[k-1].strip()
                    if re.match(r"^\d{1,3}(?:,\d{3})*$", prev):
                        price = prev
                    break
        if qty is None:
            qty = "1"

        items.append({
            "이름": full_name,
            "수량": qty,
            "금액": price
        })

    return items

IMAGE_PATH = "/content/drive/MyDrive/영수증/971120_20170705143932_354_0001.jpg"

parsed = parse_receipt(IMAGE_PATH, API_URL, SECRET_KEY)
print(parsed)
