from google.colab import drive
drive.mount('/content/drive')

# 데이터셋 압축 풀기

!rm -rf /content/drive/MyDrive/dataset
!unzip "/content/drive/MyDrive/fooding.v1i.yolov8.zip" -d "/content/drive/MyDrive/dataset"

!ls /content/drive/MyDrive/dataset

# 환경 세팅

!nvidia-smi

!pip install -U numpy torch ultralytics

from IPython import display
display.clear_output()

import ultralytics
ultralytics.checks()

from ultralytics import YOLO

from IPython.display import display, Image

# 학습

# YOLOv8 기본 모델 불러오기
model = YOLO("yolov8n.pt")

# 모델 정보 확인
model.info()

import yaml

dataset_path = "/content/drive/MyDrive/dataset/data.yaml"  # 네 데이터셋의 경로 확인

with open(dataset_path, "r") as f:
    data_yaml = yaml.safe_load(f)

print(data_yaml)

# 학습 실행
model.train(
    data="/content/drive/MyDrive/dataset/data.yaml",  # 데이터셋 설정 파일
    epochs=50,   # 학습 횟수
    batch=16,    # 한 번에 학습할 이미지 개수
    imgsz=640,   # 입력 이미지 크기
    device="cuda"  # GPU 사용 (Colab에서 자동 인식)
)

import os

test_images = os.listdir("/content/drive/MyDrive/dataset/test/images")
train_images = os.listdir("/content/drive/MyDrive/dataset/train/images")
valid_images = os.listdir("/content/drive/MyDrive/dataset/valid/images")

print(f"Test 이미지 개수: {len(test_images)}")
print(f"Train 이미지 개수: {len(train_images)}")
print(f"Valid 이미지 개수: {len(valid_images)}")

# 학습된 YOLOv8 모델 불러오기
model = YOLO("/content/runs/detect/train3/weights/best.pt")  # best.pt 경로 확인!

# 테스트 이미지 폴더에서 YOLO 예측 실행
model.predict(source="/content/drive/MyDrive/dataset/test/images", save=True)

import os
# 예측된 결과 이미지 리스트 확인
predicted_images = os.listdir("/content/runs/detect/predict")

# 결과 이미지 표시
Image(filename=f"/content/runs/detect/predict/{predicted_images[3]}")

model.save("/content/drive/MyDrive/yolo_model/best.pt")

# 검증 데이터셋을 이용해 성능 평가
metrics = model.val(data="/content/drive/MyDrive/dataset/data.yaml")

# 평가 결과 출력
print(metrics)
