from google.colab import drive
drive.mount('/content/drive')

!apt update

!wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
!dpkg -i google-chrome-stable_current_amd64.deb
!apt --fix-broken install -y

pip install webdriver-manager selenium

!apt install chromium-chromedriver
!cp /usr/lib/chromium-browser/chromedriver '/content/drive/MyDrive' #
!pip install chromedriver-autoinstaller

!python --version

import selenium
print(selenium.__version__)

chrome_path = "/content/drive/MyDrive/chromedriver"

from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import sys
from selenium.webdriver.common.keys import Keys
import urllib.request
import os
from urllib.request import urlretrieve

import time
import pandas as pd
import chromedriver_autoinstaller

sys.path.insert(0,chrome_path)
chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')
chrome_options.add_argument('lang=ko_KR')

chrome_options.binary_location = '/usr/bin/google-chrome-stable'

def selenium_scroll_option():
  SCROLL_PAUSE_SEC = 5

  # 스크롤 높이 가져옴
  last_height = driver.execute_script("return document.body.scrollHeight")

  while True:
    # 끝까지 스크롤 다운
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")

    # 10초 대기
    time.sleep(SCROLL_PAUSE_SEC)

    # 스크롤 다운 후 스크롤 높이 다시 가져옴
    new_height = driver.execute_script("return document.body.scrollHeight")

    if new_height == last_height:
        break
    last_height = new_height

url = "https://www.google.com/"  # set up the webdriver

driver = webdriver.Chrome(options=chrome_options)

# driver 작동 테스트
driver.get(url)
driver.implicitly_wait(3) # element가 로드될 때까지 지정한 시간만큼 대기할 수 있도록 설정
# driver.get_screenshot_as_file('google_screen.png')
driver.close()

print(driver)

버섯사진 = "/content/drive/MyDrive/식재료/버섯/"

# 키워드 검색하기

base_url = "https://www.google.co.kr/imghp?hl=ko" # 구글 이미지 검색
keyword=input("검색할 키워드를 입력 : ")
# print(type(a))
image_name = input("저장할 이미지 이름 : ")


driver = webdriver.Chrome(options=chrome_options)
driver.get(base_url)

# driver.find_element("xpath",'//*[@id="APjFqb"]') # 검색창 /html/body/div[1]/div[3]/form/div[1]/div[1]/div[1]/div/div[2]/textarea
# browser = driver.find_element(By.ID, "APjFqb")

browser =  driver.find_element(By.NAME, "q")
browser.clear()
browser.send_keys(keyword)
browser.send_keys(Keys.RETURN)


# 클래스를 찾고 해당 클래스의 src 리스트를 만들자
selenium_scroll_option() # 스크롤하여 이미지를 많이 확보

'''이미지 src요소를 리스트업해서 이미지 url 저장'''

images = driver.find_elements(By.CSS_SELECTOR,".YQ4gaf") #  클래스 네임에서 공백은 .을 찍어줌
images_url = []
for i in images:
    if i.get_attribute('src')!= None :
        images_url.append(i.get_attribute('src'))
    else :
        images_url.append(i.get_attribute('data-src'))
driver.close()

# Check if images_url is empty before proceeding
if images_url:
    # 겹치는 이미지 url 제거
    print("전체 다운로드한 이미지 개수: {}\n동일한 이미지를 제거한 이미지 개수: {}".format(len(images_url), len(pd.DataFrame(images_url)[0].unique())))
    images_url=pd.DataFrame(images_url)[0].unique()

    if image_name == '버섯사진' :
        for t, url in enumerate(images_url, 0):
            try:
                # 이미지를 가져오려고 시도하고 잠재적인 HTTP 오류를 처리합니다.
                urlretrieve(url, 버섯사진 + image_name + '_' + str(t) + '.jpg')
            except urllib.error.HTTPError as e:
                print(f"이미지 {t} 다운로드 오류: {e}")  # 오류 메시지 출력
                # 이미지를 건너뛰거나 오류를 다르게 처리하도록 선택할 수 있습니다.
                continue  # 다음 이미지로 건너뜁니다.

# 자원회수 - 코드 실행 마지막에 quit driver
driver.quit()
